plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	accessWidenerPath = file("src/main/resources/creaturepals.accesswidener")
    splitEnvironmentSourceSets()

	mods {
		"creaturepals" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	// Test module dependencies
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	testImplementation 'org.apache.commons:commons-lang3:3.12.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	testImplementation 'com.google.code.gson:gson:2.8.8'
	testImplementation 'org.slf4j:slf4j-api:1.7.32'
	testImplementation 'ch.qos.logback:logback-classic:1.2.6'
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}


task buildAllVersions {
    doLast {
        def versions = [
			// ones from fabric:
            // [mc: "1.20",   yarn: "1.20+build.1",    fabric: "0.83.0+1.20"],
            // [mc: "1.20.1", yarn: "1.20.1+build.10", fabric: "0.92.5+1.20.1"],
            // [mc: "1.20.2", yarn: "1.20.2+build.4",  fabric: "0.91.6+1.20.2"],
            // [mc: "1.20.3", yarn: "1.20.3+build.1",  fabric: "0.91.1+1.20.3"],
            // [mc: "1.20.4", yarn: "1.20.4+build.3",  fabric: "0.97.2+1.20.4"]

			// Ones from creaturepals:
			[mc: "1.21.1", yarn: "1.21.1+build.3", fabric: "0.116.0+1.21.1"]
        ]

        def isWindows = System.getProperty("os.name").toLowerCase().contains("windows")

        if (isWindows) {
            exec {
                commandLine "cmd", "/c", "gradlew.bat", "clean"
            }
        } else {
            exec {
                commandLine "./gradlew", "clean"
            }
        }

        versions.each { v ->
            println "Building for version: ${v.mc}"

            def props = file("gradle.properties").text
                .replaceAll("minecraft_version=.*", "minecraft_version=${v.mc}")
                .replaceAll("yarn_mappings=.*", "yarn_mappings=${v.yarn}")
                .replaceAll("fabric_version=.*", "fabric_version=${v.fabric}")
            file("gradle.properties").text = props

            def modJson = file("src/main/resources/fabric.mod.json").text
                .replaceAll('"minecraft": ".*"', "\"minecraft\": \"~${v.mc}\"")
            file("src/main/resources/fabric.mod.json").text = modJson
			def modVersion = file("gradle.properties").readLines().find { it.startsWith("mod_version=") }?.split("=")[1]?.trim()

			// BUILD WRAPPED FORGE JAR FILE
			if (v.mc == "1.21.1") {
				println "Building Forge version for 1.20.1"


				def neoforgeTomlPath = "src/main/resources/META-INF/neoforge.mods.toml"
				def neoforgeTomlContent = """
				# neoforge.mods.toml
				modLoader = "javafml"
				loaderVersion = "[47,)"       # matches Forge 47.x (e.g. 47.1.3 for MC 1.20.1)
				license = "GPLv3"

				[properties]
				"connector:placeholder" = true

				[[mods]]
				modId = "creaturepalsevolved"
				version = "${modVersion}"
				displayName = "Creature Pals"

				# Forge and Minecraft dependencies
				[[dependencies.creaturepalsevolved]]
				modId="forge"      
				mandatory=true
				versionRange="[47,)" 
				ordering="NONE"
				side="BOTH"

				[[dependencies.creaturepalsevolved]]
				modId="minecraft"
				mandatory=true
				versionRange="[1.20.1]"
				ordering="NONE"
				side="BOTH"

				# Connector dependency
				[[dependencies.creaturepalsevolved]]
				modId="connector"
				mandatory=true
				versionRange="*"
				ordering="NONE"
				side="BOTH"

				[[dependencies.creaturepalsevolved]]
				modId="connector"
				mandatory=true
				versionRange="*"
				ordering="NONE"
				side="BOTH"
	
				""".stripIndent()
				file("src/main/resources/META-INF").mkdirs()
				file(neoforgeTomlPath).text = neoforgeTomlContent

				if (isWindows) {
						exec {
							commandLine "cmd", "/c", "gradlew.bat", "build", "-x", "test"
						}
					} else {
						exec {
							commandLine "./gradlew", "build", "-x", "test"
						}
				}

				delete fileTree('build/libs') {
						include '**/*-sources.jar'
				}

				copy {
					from "build/libs"
					include "creaturepals-*.jar"
					into "build/outputs"
					rename { "creaturepalsevolved-${modVersion}-${v.mc}-forge.jar" }
					duplicatesStrategy = DuplicatesStrategy.EXCLUDE
				}

				delete fileTree('build/libs') {
					include 'creaturepals-*.jar'
				}

				file(neoforgeTomlPath).delete()
			}
            if (isWindows) {
                exec {
                    commandLine "cmd", "/c", "gradlew.bat", "build", "-x", "test"
                }
            } else {
                exec {
                    commandLine "./gradlew", "build", "-x", "test"
                }
            }

			delete fileTree('build/libs') {
                include '**/*-sources.jar'
            }

            copy {
                from "build/libs"
                include "creaturepals-*.jar"
                into "build/outputs"
                rename { "creaturepalsevolved-${modVersion}-${v.mc}.jar" }
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }

            delete fileTree('build/libs') {
                include 'creaturepals-*.jar'
            }
        }
    }
}
