plugins {
	id 'fabric-loom' version '1.6.5'
	id 'maven-publish'
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// ─────────────────────────────────────────────────────────────────────────────
// Version‐range overrides: swap in any .java under src/vs/<folder>/java
import org.gradle.util.VersionNumber

def mcVer = VersionNumber.parse(project.minecraft_version)
def versionGroups = [
		'v1_20_0_1_20_3': ['1.20.0','1.20.3'],
		'v1_20_4'       : ['1.20.4','1.20.4'],
		'v1_20_5_1_20_6': ['1.20.5','1.20.6'],
		'v1_21_0_1_21_6': ['1.21.0','1.21.6']
]

afterEvaluate {
	def sel = versionGroups.find { dir, range ->
		mcVer >= VersionNumber.parse(range[0]) && mcVer <= VersionNumber.parse(range[1])
	}?.key
	if (!sel) return

	def vsDir    = file("src/vs/$sel/java")
	def mainRoot = file("src/main/java")

	sourceSets.main.java.srcDir vsDir

	// for each override file, exclude *only* the matching fallback
	fileTree(dir: vsDir, includes: ['**/*.java']).each { File overrideFile ->
		// build the path relative to vsDir, e.g. "com/owlmaddie/message/ExampleVersion.java"
		def rel = vsDir.toPath()
				.relativize(overrideFile.toPath())
				.toString()
				.replace(File.separator, '/')

		// now tell Gradle: exclude that path—but only when it comes from src/main/java
		sourceSets.main.java.exclude { details ->
			def f = details.file
			return f.absolutePath.startsWith(mainRoot.absolutePath) &&
					details.relativePath.pathString == rel
		}
	}
}
// ─────────────────────────────────────────────────────────────────────────────

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	accessWidenerPath = file("src/main/resources/creaturechat.accesswidener")
    splitEnvironmentSourceSets()

	mods {
		"creaturechat" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	// Test module dependencies
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
	testImplementation 'org.apache.commons:commons-lang3:3.12.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	testImplementation 'com.google.code.gson:gson:2.8.8'
	testImplementation 'org.slf4j:slf4j-api:1.7.32'
	testImplementation 'ch.qos.logback:logback-classic:1.2.6'
}

test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
